#01 Introduction to TypeScript

🔷 What is TypeScript?
##########################

➤TypeScript is a superset of JavaScript.
➤It is a programming language built on JavaScript.
➤TypeScript has all the features of JavaScript plus extra features like:
1. interface
2. access modifiers

These features are not available in the latest version of JavaScript.

🎯 Why Use TypeScript?
➤TypeScript makes writing JavaScript easier, cleaner, less error-prone.
➤You can write simple code in TypeScript which compiles to complex JavaScript logic.
➤Helps avoid bugs and identity

⚠️ Limitation of TypeScript
➤TypeScript code cannot be executed directly by JavaScript runtimes like:
1. Browser
2. Node.js

⚙️ How TypeScript Works
➤TypeScript is also a tool — a powerful compiler.
➤It compiles TypeScript code into JavaScript code.
➤Then this JavaScript code can be run by:
1. Browser
2. Node.js

➤We don’t write JavaScript directly when using TypeScript.
➤We write TypeScript, then compile it to JavaScript.

🤔 How can TS use new features if JS doesn’t support them?
➤The TypeScript compiler uses workarounds in JavaScript.
➤TS features are compiled into equivalent JavaScript using:
1. Existing JavaScript features
2. More complex JS code
➤There's no magic
➤You write simple code in TypeScript -> gets converted into complex JS code.

TypeScript is strongly typed, whereas Javascript is dynamically typed.


📘 TypeScript Installation & Setup
####################################

🔹 Compile TypeScript Code
Open terminal in the project folder.

Run the compiler: tsc app.ts
This generates app.js.

📘 TypeScript – Variables
##########################
➤A variable is a named storage where we can store a value.

🔹 Creating Variables in TypeScript
Variables can be created using let or const keywords.

let num=100;
const str="hello world";

🔹 let vs const
| Feature                 | `let`                      | `const`                               |
| ----------------------- | -------------------------- | ------------------------------------- |
| Initialization Required | ❌ Not required immediately | ✅ Must be initialized immediately     |
| Can Reassign Value      | ✅ Yes                      | ❌ No, value cannot be changed         |
| Example (Valid)         | `let x; x = 10;`           | `const y = 5;`                        |
| Example (Invalid)       | –                          | `const y;` (❌ Error: must initialize) |

🔹 Type Inference in TypeScript
################################
TypeScript automatically infers the type at the time of initialization.

Example:
let num=100; //inferred as number

Once the type is set, it cannot be changed.
num=true // ❌ Error: boolean not assignable to number

🔹 Rules for Naming Variables
1. Allowed characters- Letters, digits, _(underscore), {dollar sign}
2. Cannot start with a digit.
3. Valid start characters: A letter, _, $
4. Case Sensitive
5. Reserved Keywords not Allowed

📘 Datatypes in TypeScript
############################

Note: 
➤With Backticks we can write multi line string, not possible normally also allows expression interpolation.
➤TypeScript numbers are always floating point numbers even if we don't see or write it.

Common Data TypeScript
string: Textual data or a sequence of characters.

number: All numeric values(both integers and float).
boolean: true or false

0, null, undefined is a falsy values.

📘 Explicit Typing & Type Inference

1. Explicit Typing: You can explicitly specify data types for:
➤ Function parameters
➤ Variables
➤ Function return value(optional)

function sum(num1:number,num2:number):number{
    return num1+num2;
}
If non-number values are passed, TypeScript gives a compile-time error.

🔹 2. Without Explicit Types
If no type is specified, any type can be passed, which can lead to unexpected results.

function sum(num1,num2){
    return num1+num2;
}

sum("12",13); //Output: "1213" (string concatenation!)

🔹 3. Explicit Types for Variables
let n1:number=10;
let msg:string= "Result is"

🔹 4. Type Inference
TypeScript automatically infers the type of a variable when you assign a value during declaration.

let n1=10; //inferred as number
let name= "Ankur" //inferred as string

After inference, the type cannot be changed
n1= "Hello" //❌ Error: string not assignable to number

🔹 5. Type Inference in Functions
If you define parameters without types, any value can be passed (not recommended).
➤ Always use explicit typing in function parameters for safety.

🔹 6. Comparison with JavaScript
| Feature              | JavaScript          | TypeScript               |
| -------------------- | ------------------- | ------------------------ |
| Typing               | Dynamic             | Static (strong typing)   |
| Type Errors          | Detected at runtime | Detected at compile time |
| Variable Type Change | Allowed             | Not Allowed              |

📘 Objects in TypeScript
##########################

🔹 1. Creating Objects in TypeScript

let person={
    name:"John",
    age:30
};
Just like JavaScript- Key value pairs

🔹 2. Type Inference for Objects
➤TypeScript infers the structure of the object at initialization.
➤If you reassign an object with extra or missing properties, it throws an error.

person={
    name:"Mark",
    age:32,
    gender:"male" //❌ Error: gender is not expected
};

🔹 3. Explicit Object Typing
let person: {name:string,age:number}={
    name:'John",
    age:30
}
Only objects matching this structure can be assigned.

🔹 4. Assigning object as a Type (Generic)
let person: object;

Accepts any object, but accessing specific properties will give error(TypeScript doesn’t know what properties exist).

🔹 5. Accessing Properties
console.log(person.name); // if name exist
console.log(person["age"]); // square bracket notation

🔹 6. Nested Object Typing
let person:{
    name:string;
    age:number;
    address:{
        city: string;
        country: string;
    }
}={
    name:"John",
    age:30,
    address:{
        city:"London",
        country:"UK"
    }
};

🔹 7. JavaScript vs TypeScript
| Feature                | JavaScript      | TypeScript           |
| ---------------------- | --------------- | -------------------- |
| Type Safety            | ❌ No            | ✅ Yes                |
| Extra Property Check   | ❌ Allowed       | ✅ Error              |
| Property Inference     | ❌ Not available | ✅ Strong inference   |
| Accessing Missing Keys | `undefined`     | ❌ Compile-time error |

📘 Arrays in TypeScript
##########################
➤Just like JavaScript, an array is a collection of values.
➤Syntax to create an array is the same [], but TypeScript adds type safety.

🔹 1. Type Inference in Arrays
let person=["John",28,"male",1000];

TypeScript infers: (string | number)[] -> An array of string or number.

🔹 2. Restriction Based on Inferred Type
person.push(true);// ❌ Error: boolean not allowed
person.push(500);// number allowed

🔹 3. Arrays with Single Type
let names= ["Alice", "Bob"] // string[]
Push any value not matching the type -> ❌ Error

🔹 4. Explicitly Typing Arrays
let names: string[] = [];           // only strings allowed
names.push("John");                 // ✅ OK
names.push(42);                     // ❌ Error

//Use | (pipe) operator for multiple allowed types:
let person: (string | number)[] = ["John", 28]; // ✅
person.push(true); // ❌ Error if boolean not included

Accessing of elements we use traditional indexing method

Use for...of loop:
for(let year of birthYears){
    console.log(year);
}

📌 Key Differences from JavaScript
| Feature                   | JavaScript       | TypeScript           |
| ------------------------- | ---------------- | -------------------- |
| Type Safety               | ❌ No             | ✅ Yes                |
| Invalid Type Insertion    | Allowed          | ❌ Compile-time error |
| Explicit Type Declaration | ❌ Not applicable | ✅ Supported          |
| Code Autocompletion       | Limited          | ✅ Strong support     |

🔷 What is a Tuple in TypeScript?
###################################
➤A Tuple is a fixed length, ordered collection of elements.
➤Each position in the tuple has a specific data type.
➤Not available in JavaScript, but compiled to an array in JS.

let employee:[number,string,number,boolean];
employee=[1123,"John", 2000,true];
➤We cannot add 5th element but there is an exception

❗ Exception: Push Method
Even though tuples are fixed-length, you can still push values to them without error:

employee.push(100): //✅No compiler error
This is a TypeScript limitation, not enforced at runtime or by push.

❌ Common Errors
➤Assigning more/fewer values than defined:

employee = [1, "Mark", 1200];     // ❌ Error: needs 4 elements
employee = [1, "Mark", 1200, true, 100]; // ❌ Error: too many elements

➤Assigning wrong types:

employee = ["one", "John", 2000, true]; // ❌ Error: "one" is not a number

🚫 Why Not Use Tuples for Random, Long, Mixed Data?
Because:
➤Tuples are meant for structure (e.g., [id, name, active])
➤Not meant for arbitrary or unpredictable values

Tuples can be reassinged when it have same type of elements in the ordered manner in fixed defined length.

🔶 TypeScript enum
######################

➤A special data type used to define a set of named constants.
➤Not available in plain JavaScript, only in TypeScript.
➤Used for cleaner, more readable code especially when dealing with fixed categories(e.g. user roles,states);

enum Roles{
    Admin,
    ReadOnly,
    WriteOnly,
    ReadWrite
}
By default 
➤Admin=0, ReadOnly=1,WriteOnly=2,ReadWrite=3

🧩 Usage Example
let user={
    name:"Ankur",
    age:30,
    role:Roles.Admin
};

if(user.role==Roles.Admin){
    console.log("This user is Admin");
}

✍️ Explicit Value Assignment
Numeric:
enum Roles {
  Admin = 100,
  ReadOnly = 200,
  WriteOnly = 300,
  ReadWrite         // → 301 (auto-increment from previous)
}

String:

enum Roles {
  Admin = "ADMIN",
  ReadOnly = "READ_ONLY"
}

Mixed (⚠ Not recommended):

enum Roles {
  Admin = "ADMIN",
  ReadOnly = 2
}

Note:Can be mixed with string and number but initialization should end wiht number only

🌀 Compilation to JavaScript
➤TypeScript compiles enums to IIFE functions to generate bi-directional mappings.

✅ When to Use Enum
➤When you need fixed categories (roles, permissions, statuses).
➤To avoid hardcoded strings or magic numbers in your logic.
➤When you want autocompletion + type safety.

🚫 Caution
➤Enums are not available in JS- they're a TypeScript-only feature.
Use const enum for performance(inlines the values), but it doesn't support reverse mapping.

🔶 TypeScript any Type
#########################

➤any is the most flexible type in TypeScript.
➤A variable declared as any can hold any kind of value:number, string, boolean, array, object ect.
➤Disables type checking, like JavaScript.

let data: any;

data = 42;          // ✅ No error
data = "hello";     // ✅ No error
data = true;        // ✅ No error
data = [1, 2, 3];   // ✅ No error
data = { a: 1 };    // ✅ No error

📚 any[] — Array of Any
let arr: any[] = [1, "two", true, null, undefined];

⚠️ Why to Avoid any
➤Removes all the benifits of TypeScript.
➤Turns TypeScript code into JavaScript-like untyped code.
➤May lead to runtime bugs since type saftey is lost.

✅ Use Case
➤When you don't know the type in advance(e.g. external libraries, user inputs, JSON, parsing).
➤Type is dynamic or varies at runtime.

🕵️ Variable with No Type or Value
let test;  // No value, no type
console.log(typeof test);  // "undefined"
console.log(test);         // undefined

➤TypeScript infers test as any if used without initialization.
➤Both type and value will be undefined.

🟣 TypeScript: Union Types
############################
➤A Union Type allows a variable, parameter or return type to hold more than one type.

let data: string|number; ( | ) know as pipe operator
Here data can hold either a string or a number.

✅ Example 1: Union in Variables
let user:{name:string,age:number} | null;

✅ Example 2: Union in Function Parameters
function printStatus(message:string,code:string|number){
    if(typeof code==="string"){ //here typeof is a type guard
        code =code.trim(); //✅Safe: Only used if code is string
    }
    console.log(`${message}- Status Code: ${code}`);
}
➤To access type-specific methods, you need type guards (typeof, instanceof, etc.).

printStatus("Success",200);
printStatus("Not found","404");

❗Common Pitfall
➤Trying to call methods that only exist on one of the types:
code.trim(); // ❌ Error: 'trim' might not exist on type 'number'

✔️ Fix:
Use a type check:

if (typeof code === "string") {
  code = code.trim();
}

✅ When to Use Union Types
➤When you expect multiple possible input types.
➤When a variable can be nullable.
➤For flexibility with controlled safety (better than any).

🟡 TypeScript: Literal Types
##############################

A literal type allows you to restrict a variable to a specific value, not just a general type.

➤Unlike string,which accepts any string value, a literal type like "admin" only accepts that exact value

✅ Example 1: Literal Type in a Constant
const status="hello world";

➤TypeScript infers:
status:"hello world"(Literal Type)
➤Not just string -- it's exactly "hello world".

🆚 Difference Between const and let

const msg = "hi";       // msg: "hi" (literal)
let msg2 = "hi";        // msg2: string

✅ Example 2: Literal Types in Function Parameters
function roleMessage(role:"admin" | "read" | "read-write"){
    switch(role){
        case "admin":
        console.log("You have admin permissions");
        break;
        case "read":
        console.log("You have read permissions");
        break;
        case "read-write":
        console.log("You have read-write permissions");
        break;
        default:
        console.log("Unknown role");
    }
}

roleMessage("admin");         // ✅ allowed
roleMessage("read-write");    // ✅ allowed
roleMessage("guest");         // ❌ error at compile time

🔁 Literal Types Can Be:
Strings: "start" | "stop"
Numbers: 1 | 2 | 3
Booleans: true | false
Null / Undefined: null | undefined

⚠️ Why Use Literal Types?
➤Adds strict control over allowed values.
➤Prevents invalid inputs at compile time.
➤Helps in writing safe and predictable code (especially with switch, API requests, enums, etc.).

🟡 TypeScript: Type Alias
##########################

➤A Type Alias allows you to give a custom name to a type(primitive, union, literal, object etc).
➤It helps in writing clean, reusable, and maintainable code by avoiding type repition.

✅ Syntax
type CustomTypeName = existingType;

✅ Example 1: Alias for a Primitive Type

type StringType=string;
let message:StringType="Hello World!";
StringType is now a custom alias for string.

✅ Example 2: Alias for a Union Type
type StringOrNumber= string | number;

function printCode(code: StringOrNumber) {
  console.log(code);
}
➤Instead of repeating string | number, you can use the alias StringOrNumber.

✅ Example 3: Alias for an Object Type
type User={
    firstName:string;
    lastName:string;
    age:number;
};

function getFullName(user:User):string{
    return `${user.firstName} ${user.lastName}`;
}

🧠 Bonus Tip:
You can even alias complex types like:

type UserList = User[];
type Callback = (value: number) => void;

🟡 TypeScript: Function Return Types
#####################################

➤The return type of a function indicates the type of value that function will return.
➤You can either:
Let TypeScript infer the return type automatically.
Explicitly define the return type using :type Syntax

✅ Syntax

function functionName(params): returnType {
  // logic
  return value;
}

🔹 Examples

1️⃣ Function That Returns a Value

function add(num1:number,num2:number):number{
    return num1+num2;
}
➤Return type is explicitly declared as numbers
➤TypeScript can also infer this if return type is not specified.

2️⃣ Incorrect Return Type

function add(num1: number, num2: number): string {
  return num1 + num2; // ❌ Error: number is not assignable to string
}

3️⃣ Return Type Inferred as string

function add(num1: number, num2: number) {
  return (num1 + num2).toString();
}

4️⃣ Function That Returns Nothing

function add(num1: number, num2: number): void {
  console.log(num1 + num2);
}
➤void means that function doesn't return anything.
➤Even if you use return; without a value, it is still void.

5️⃣ Return Type as undefined (Not Recommended)

function add(num1: number, num2: number): undefined {
  console.log(num1 + num2);
  return undefined;
}
Works, but not recommended.
✅ Prefer void over undefined for clarity and convention.

➤If no return statment is used, TypeScript infers return type as void.

🟣 TypeScript: Function Types as Variable Types
################################################

🧠 What You Already Know
➤We can add types to function parameters and return types.
➤We can assign a function to a variable in Javascript.

🔸 Example: Assigning Function to Variable
function greeUser(user:{name:string}){
  console.log(`Hello ${user.name}`)
}

let greet=greeUser; // ✅ Valid
✅ We can now call greet({name:"John"}) and it will behave like greeUser. 

❗ Problem with any Type
If no type is defined for greet, its type is inferred as any:

let greet:any=greeUser;
greet=100; // ❌ Allowed, but dangerous!

➤Can accidentally assign non-function values (like 100, true, "text") to greet.
➤This cause runtime errors (e.g. greet is not a function) without compile-time warning.

✅ Solution 1: Use General Function Type
let greet:Function =greeUser;
greet=100; // ❌ Error at compile time

➤Function restricts assignment to function values only.
➤❌ But it doesn’t check the parameter or return types of the function.

✅✅ Solution 2: Use Specific Function Signature
➤Specify the exact structure (Signature) of the function:

let greet:(user:{name:string})=>void;

Now only function that:
➤Accepts a single user object with a name Property
➤Return void
➤...can be assigned to greet

🔍 Detailed Example
type User = { name: string; age: number };

function greetUser(user: User): void {
  console.log(`Hello ${user.name}`);
}

function isEligible(user: User): void {
  console.log(user.age >= 18);
}

function sum(a: number, b: number): number {
  return a + b;
}

// Declare variable with specific function signature
let greet: (user: User) => void;

greet = greetUser;   // ✅
greet = isEligible;  // ✅
greet = sum;         // ❌ Error - Signature mismatch

🟦 TypeScript: Function Types for Variables & Callbacks
###########################################################

We can assign a function to a variable, and define the expected function signature using function types.

let addNumbers:(a:number,b:number) => number;

function sum(x:number,y:number):number{
  return x+y;
}

addNumbers=sum; // ✅ Matches signature

🔁 Callback Functions with Function Types
We can also define function types as parameter types (for callback functions).

✅ Example: Defining a Function with a Callback
function getResult(num1:number,num2:number,print:(msg:string,result:number) =>void):void {
  const result=num1+num2;
  print("Sum =",result);
} 

📘 Callback Function Example
function display(message:string,result:number):void{
  console.log(`${message}${result}`);
}

🔄 Calling with Callback
getResult(12,13,display); // Output: Sum = 25

⚠️ What If We Pass Invalid Types?
If the callback parameter is not a function or does not match the signature, TypeScript shows compile-time errors

📌 Why Use Function Types for Callbacks?
➤Prevents bugs during runtime.
➤Ensures correct usage of callbacks.
➤Helps with IntelliSense and auto-completion.
➤Makes function contracts clear and safe.

✅ Best Practice
Always define callback function types explicitly when:
➤Passing a function as an argument
➤Returning a function from another function
➤Storing a function in a variable

🔹 TypeScript unknown Type
###########################

🧠 What Is unknown?
➤unknown is a type-safe counterpart of any.
➤It is used when you don't yet know what type of data a variable can hold.
➤Unlike any, it forces you to do a type check before using the variable.

✅ unknown vs any
| Feature                        | `any`          | `unknown`  |
| ------------------------------ | -------------- | ---------- |
| Can hold any value             | ✅ Yes          | ✅ Yes      |
| Type checking before usage     | ❌ Not required | ✅ Required |
| Type-safe                      | ❌ No           | ✅ Yes      |
| Suitable when type is unknown? | ⚠️ Not ideal   | ✅ Ideal    |

💡 Use Case
let inputVal:unknown;
inputVal = 123;         // valid
inputVal = "hello";     // valid
inputVal = [1, 2, 3];   // valid
✅ All types can be assigned to unknown.

let uname:string;
uname=inputVal; // ❌ Error: Type 'unknown' is not assignable to type 'string'

We must narrow the type:
if(typeof inputVal==="string") uname=inputVal;

🚫 Why Not Use any?
Using any disables all type safety:
let inputVal:any;
let uname:string=inputVal; // ✅ No error, but could lead to runtime bugs

Whereas unknown prevents unsafe assignment unless you explicit verify the type.

🧪 Real-Life Scenario
You get data from an API reponse or user input and aren't sure of its type at first:

function handleInput(data:unknown){
  if(typeof data==="number"){
    console.log("Square:",data*data);
  }
  else{
    console.log("Invalid number input); 
  }
}

🔥 TypeScript never Type
#########################

🚫 What Is never?
➤The never type represents a value that never occurs.
➤A function with return type (never) never completes normally:
It either throw an error.
Or it runs forever (like an infinite loop).

It’s more strict than void — not even undefined is returned.

✅ When to Use never
You use never when a function
1. Always thows an error
2. Never finishes executing (infinite loop)

🔁 never vs void
| Feature                  | `void`                              | `never`                                              |
| ------------------------ | ----------------------------------- | ---------------------------------------------------- |
| Used for functions that: | Finish but return nothing           | Never finish or always throw                         |
| Returns value?           | ❌ No value, but returns `undefined` | ❌ No return at all — not even `undefined`            |
| Logged output            | Logs `undefined`                    | Logs nothing (because function crashes or loops) |

🧪 Examples
✅ 1. Error-Throwing Utility Functions
Imagine a utility function that always throws an error when something goes wrong — this is a perfect case for never:

function throwError(message: string): never {
  throw new Error(message);
}
✅ Real-Life Scenario:
In an API or validation library:

function validateUser(data: any) {
  if (!data.email) {
    throwError("Email is required"); // return type: never
  }
}
Here, throwError() stops the execution and will never return.

❌ No value is ever returned — just throws.

2. Function with infinite loop → never
function runForever():never{
  while(true){
    console.log("Running...")
  }
}
🚫 Never exits → return type is never.
console.log(runForever());           // keeps running, no output after

✅ 2. Exhaustive Type Checking (with never)
When you use discriminated unions, never helps ensure that all cases are handled — very common in Redux, state machines, or switch cases.

🔄 Example: Handling shape types

type Shape = 
 { type: "circle"; radius: number } | { type: "square"; side: number };

function getArea(shape: Shape): number {
  switch (shape.type) {
    case "circle":
      return Math.PI * shape.radius * shape.radius;
    case "square":
      return shape.side * shape.side;
    default:
      const _exhaustiveCheck: never = shape; // ❌ Error if new shape type is added but not handled
      throw new Error("Unhandled shape type");
  }
}
✅ Real-Life Scenario:
In large applications, this pattern ensures that all variants of a type are covered. If a new shape is added (like "triangle"), TypeScript will force you to handle it.

✅ 3. Unreachable Code Detection
In deeply nested logic or switch cases, never can help identify unreachable code:

function process(value: string | number) {
  if (typeof value === "string") {
    console.log("string value:", value);
  } else if (typeof value === "number") {
    console.log("number value:", value);
  } else {
    const unreachable: never = value; // Will throw error: Type 'string | number' is not assignable to 'never'
  }
}

⚠️ Default Behavior
If you don’t write the return type:
➤Functions that throw or loop forever will not be automatically inferred as never.
➤You'll have to explicitly set it to never.

🔶 What is Array Destructuring?
#################################

Array Destructuring is an ES6 feature that allows unpacking values from arrays  into individual Variables using a clean, concise syntax.

✅ Traditional Way (Without Destructuring)

const person=["John","Smith",28];
const fName=person[0];
const lName=person[1];
const age=person[2];
This becomes verbose for larger arrays.

✅ Destructuring Syntax

const [fName,lName,age]=person;

➤Uses square brackets [].
➤Assign based on position/index.

🔷 Important Points
1. 🔹 You Can Skip Elements
const [fName,,age]=person; //skips the second element

2. 🔹 Fewer Variables Than Elements
const [fName,lName]=person; //only first two elements used

3. 🔹 More Variables Than Elements
const [fName,lName,age,gender="Male"]=person;
If gender is missing, it will default to "Male" if not defined the default value then it will assigned with undefined.

5. 🔹 Original Array is Untouched
Destructuring does not modify the original array.

✅ Use Cases
➤Returning multiple values from a function.
➤Extracting parts of an API response.
➤Clean, readable assignments from arrays.

🔶 What is Object Destructuring?
##################################

Object destructuring is an ES6 feature that allows ys to extract properties from an object and assign them to variables in a single line using a concise syntax.

✅ Traditional Way (Without Destructuring)
const user={
  forname:"John",
  age:28,
  gender:"Male"
};

const forname=user.forname;
const age=user.age;
const gender=user.gender;

✅ With Object Destructuring

const {forname,age,gender}=user;

➤Uses curly braces {}.
➤The variable name must match the property name in the object.
➤Destructuring is based on property names, not order like arrays.

🔷 Important Points

1. 🔹 Variable Names Must Match Object Keys
const {forname}=user; //OK
const {name}=user; // ❌ Error (or `undefined` in JS) – no such property

2. 🔹 Using Aliases for Variables
If you want the variable name to be different from the property name:

const {forname:fname}=user;
console.log(fname);   //John

➤forname is a property name and fname is the new variable name.

3. 🔹 Mixing Destructuring with Aliases
const {forname:fname,age,gender}=user;

4. 🔹 Handling Non-Existent Properties
const {country}=user; // ❌ Error: Property 'country' does not exist on type

➤Ensure the object type includes country.
➤Or use optional chaining (for nested objects)/defaults:
const {country="India"}=user;

✅ What is the Spread Operator?
The spread operator(...) is a feature introduced in ES6 that unpacks elements from array or properties from objects into individual values or properties.

const arr=[1,2,3]
console.log(...arr); //Output: 1 2 3

🔷 Use Cases of the Spread Operator

1. 🔁 Extract Elements from an Array
const user=["John","Mark","Mary"]
console.log(...user)// Output: John Mark Mary

2. 📋 Shallow Copy of an Array
const user=["John","Mark","Mary"]
const copyUsers=[...users];

copyUsers.push("Steve");
console.log(copyUsers); // // ["John", "Mark", "Mary", "Steve"]
console.log(users); // // ["John", "Mark", "Mary"]

3. ➕ Merging Arrays / Adding Elements
const users = ["John", "Mark", "Mary"];
const extendedUsers = ["Ravi", "Steve", ...users];
console.log(extendedUsers); // ["Ravi", "Steve", "John", "Mark", "Mary"]

✅ Spread brings in elements not as an array, but as individual items.

4. 📦 Using Spread in Objects
const person={
  firstName:"John",
  age:28,
  gender:"male"
};

const employee={
  ..person,
  salary:1200,
  company:"Google"
};

console.log(employee);
//Output
{
  firstName:"John",
  age:28,
  gender:"male",
  salary:1200,
  company:"Google"
};

🔄 Copies all key-value pairs from person into employee.

❗ Important Notes
🔸 Shallow Copy Only
Spread operator does not deep clone nested structures.and hence the nested object will be copied as reference so when we change in one object it will change the other also.

const nested = [{ name: "John" }];
const copy = [...nested];

copy[0].name = "Steve";
console.log(nested[0].name); // "Steve" 😱